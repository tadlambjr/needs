# Name of your application. Used to uniquely configure containers.
service: needs

# Name of the container image.
image: roaringlambproductions/needs

servers:
  web:
    hosts:
      - roaring-lamb-staging
    options:
      memory: 384m
      memory-swap: 384m
      cpus: 0.5

proxy:
  ssl: true
  host: staging.churchneeds.net
  app_port: 80
  forward_headers: true
  healthcheck:
    path: /up
    interval: 10
    timeout: 30

registry:
  server: registry.digitalocean.com
  username: roaringlambproductions
  password:
    - KAMAL_REGISTRY_PASSWORD

retain_containers: 2

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - POSTMARK_API_TOKEN
    - POSTMARK_WEBHOOK_USERNAME
    - POSTMARK_WEBHOOK_PASSWORD
    - STRIPE_SECRET_KEY
    - STRIPE_PUBLISHABLE_KEY
    - STRIPE_WEBHOOK_SECRET
    - TELNYX_API_KEY
    - TELNYX_MESSAGING_PROFILE_ID
    - TELNYX_PHONE_NUMBER

  clear:
    # Set the host for URL generation (staging environment)
    APP_HOST: staging.churchneeds.net

    # Database prefix to isolate from other apps on shared server
    DATABASE_PREFIX: needs_staging

    # Disable Solid Queue in staging - insufficient resources on shared server
    SOLID_QUEUE_IN_PUMA: "false"
    PORT: 3000

    # Skip db:prepare to speed up deployment boot time
    SKIP_DB_PREPARE: "true"

    # Optimize for low traffic (max 2 concurrent users)
    WEB_CONCURRENCY: 0
    RAILS_MAX_THREADS: 3

    # Memory management for shared server
    MALLOC_ARENA_MAX: 2
    RUBY_GC_HEAP_GROWTH_FACTOR: 1.1
    RUBY_GC_HEAP_GROWTH_MAX_SLOTS: 5000
    RUBY_GC_MALLOC_LIMIT: 16777216

    # Reduce Rails memory footprint
    RAILS_ENV: production
    RAILS_SERVE_STATIC_FILES: true

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"
  prune-all: prune all
  prune-images: prune images

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "needs_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  context: .
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  args:
    RUBY_VERSION: 3.4.5
  secrets:
    - RAILS_MASTER_KEY

# Use a different ssh user than root
ssh:
  user: roaringlamb

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  solid_queue:
    image: roaringlambproductions/needs:latest
    host: roaring-lamb-staging
    cmd: bundle exec rake solid_queue:start
    env:
      clear:
        RAILS_ENV: production
        DATABASE_PREFIX: needs_staging
        # Reduce resources for shared staging server - minimal config
        SOLID_QUEUE_POLL_INTERVAL: 10
        SOLID_QUEUE_CONCURRENCY: 1
        SOLID_QUEUE_PROCESSES: 1
        SOLID_QUEUE_DISPATCHERS: 1
        SOLID_QUEUE_WORKERS: 1
      secret:
        - RAILS_MASTER_KEY
        - POSTMARK_API_TOKEN
        - STRIPE_SECRET_KEY
        - TELNYX_API_KEY
    options:
      memory: 320m
      memory-swap: 320m
      cpus: 0.5
