# Name of your application. Used to uniquely configure containers.
service: needs

# Name of the container image.
image: roaringlambproductions/needs

servers:
  web:
    hosts:
      - roaring-lamb-staging
    options:
      memory: 256m
      memory-swap: 256m
      cpus: 0.5

proxy:
  ssl: true
  host: needs.roaringlambproductions.com
  app_port: 80
  forward_headers: true
  healthcheck:
    path: /up
    interval: 10
    timeout: 20

registry:
  server: registry.digitalocean.com
  username: roaringlambproductions
  password:
    - KAMAL_REGISTRY_PASSWORD

retain_containers: 2

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    # SOLID_QUEUE_IN_PUMA: true
    PORT: 3000

    # Optimize for low traffic (max 2 concurrent users)
    WEB_CONCURRENCY: 0
    RAILS_MAX_THREADS: 5

    # Reduce Solid Queue resources for staging
    # JOB_CONCURRENCY: 1

    # Memory management for shared server
    MALLOC_ARENA_MAX: 2
    RUBY_GC_HEAP_GROWTH_FACTOR: 1.1
    RUBY_GC_HEAP_GROWTH_MAX_SLOTS: 5000
    RUBY_GC_MALLOC_LIMIT: 16777216

    # Reduce Rails memory footprint
    RAILS_ENV: production
    RAILS_SERVE_STATIC_FILES: true

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"
  prune-all: prune all
  prune-images: prune images

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "needs_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  context: .
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  args:
    RUBY_VERSION: 3.4.5
  secrets:
    - RAILS_MASTER_KEY

# Use a different ssh user than root
ssh:
  user: roaringlamb

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
